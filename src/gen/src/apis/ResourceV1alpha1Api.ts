/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.26.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    V1APIResourceList,
    V1APIResourceListFromJSON,
    V1APIResourceListToJSON,
    V1DeleteOptions,
    V1DeleteOptionsFromJSON,
    V1DeleteOptionsToJSON,
    V1Status,
    V1StatusFromJSON,
    V1StatusToJSON,
    V1alpha1PodScheduling,
    V1alpha1PodSchedulingFromJSON,
    V1alpha1PodSchedulingToJSON,
    V1alpha1PodSchedulingList,
    V1alpha1PodSchedulingListFromJSON,
    V1alpha1PodSchedulingListToJSON,
    V1alpha1ResourceClaim,
    V1alpha1ResourceClaimFromJSON,
    V1alpha1ResourceClaimToJSON,
    V1alpha1ResourceClaimList,
    V1alpha1ResourceClaimListFromJSON,
    V1alpha1ResourceClaimListToJSON,
    V1alpha1ResourceClaimTemplate,
    V1alpha1ResourceClaimTemplateFromJSON,
    V1alpha1ResourceClaimTemplateToJSON,
    V1alpha1ResourceClaimTemplateList,
    V1alpha1ResourceClaimTemplateListFromJSON,
    V1alpha1ResourceClaimTemplateListToJSON,
    V1alpha1ResourceClass,
    V1alpha1ResourceClassFromJSON,
    V1alpha1ResourceClassToJSON,
    V1alpha1ResourceClassList,
    V1alpha1ResourceClassListFromJSON,
    V1alpha1ResourceClassListToJSON,
} from '../models';

export interface ResourceV1alpha1ApiCreateNamespacedPodSchedulingRequest {
    namespace: string;
    body: V1alpha1PodScheduling;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ResourceV1alpha1ApiCreateNamespacedResourceClaimRequest {
    namespace: string;
    body: V1alpha1ResourceClaim;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ResourceV1alpha1ApiCreateNamespacedResourceClaimTemplateRequest {
    namespace: string;
    body: V1alpha1ResourceClaimTemplate;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ResourceV1alpha1ApiCreateResourceClassRequest {
    body: V1alpha1ResourceClass;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ResourceV1alpha1ApiDeleteCollectionNamespacedPodSchedulingRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface ResourceV1alpha1ApiDeleteCollectionNamespacedResourceClaimRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface ResourceV1alpha1ApiDeleteCollectionNamespacedResourceClaimTemplateRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface ResourceV1alpha1ApiDeleteCollectionResourceClassRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface ResourceV1alpha1ApiDeleteNamespacedPodSchedulingRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface ResourceV1alpha1ApiDeleteNamespacedResourceClaimRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface ResourceV1alpha1ApiDeleteNamespacedResourceClaimTemplateRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface ResourceV1alpha1ApiDeleteResourceClassRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface ResourceV1alpha1ApiListNamespacedPodSchedulingRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ResourceV1alpha1ApiListNamespacedResourceClaimRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ResourceV1alpha1ApiListNamespacedResourceClaimTemplateRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ResourceV1alpha1ApiListPodSchedulingForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ResourceV1alpha1ApiListResourceClaimForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ResourceV1alpha1ApiListResourceClaimTemplateForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ResourceV1alpha1ApiListResourceClassRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ResourceV1alpha1ApiPatchNamespacedPodSchedulingRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface ResourceV1alpha1ApiPatchNamespacedPodSchedulingStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface ResourceV1alpha1ApiPatchNamespacedResourceClaimRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface ResourceV1alpha1ApiPatchNamespacedResourceClaimStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface ResourceV1alpha1ApiPatchNamespacedResourceClaimTemplateRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface ResourceV1alpha1ApiPatchResourceClassRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface ResourceV1alpha1ApiReadNamespacedPodSchedulingRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ResourceV1alpha1ApiReadNamespacedPodSchedulingStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ResourceV1alpha1ApiReadNamespacedResourceClaimRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ResourceV1alpha1ApiReadNamespacedResourceClaimStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ResourceV1alpha1ApiReadNamespacedResourceClaimTemplateRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ResourceV1alpha1ApiReadResourceClassRequest {
    name: string;
    pretty?: string;
}

export interface ResourceV1alpha1ApiReplaceNamespacedPodSchedulingRequest {
    name: string;
    namespace: string;
    body: V1alpha1PodScheduling;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ResourceV1alpha1ApiReplaceNamespacedPodSchedulingStatusRequest {
    name: string;
    namespace: string;
    body: V1alpha1PodScheduling;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ResourceV1alpha1ApiReplaceNamespacedResourceClaimRequest {
    name: string;
    namespace: string;
    body: V1alpha1ResourceClaim;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ResourceV1alpha1ApiReplaceNamespacedResourceClaimStatusRequest {
    name: string;
    namespace: string;
    body: V1alpha1ResourceClaim;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ResourceV1alpha1ApiReplaceNamespacedResourceClaimTemplateRequest {
    name: string;
    namespace: string;
    body: V1alpha1ResourceClaimTemplate;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ResourceV1alpha1ApiReplaceResourceClassRequest {
    name: string;
    body: V1alpha1ResourceClass;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

/**
 * 
 */
export class ResourceV1alpha1Api extends runtime.BaseAPI {

    /**
     * create a PodScheduling
     */
    async createNamespacedPodSchedulingRaw(requestParameters: ResourceV1alpha1ApiCreateNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1PodScheduling>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createNamespacedPodScheduling.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNamespacedPodScheduling.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1PodSchedulingToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PodSchedulingFromJSON(jsonValue));
    }

    /**
     * create a PodScheduling
     */
    async createNamespacedPodScheduling(requestParameters: ResourceV1alpha1ApiCreateNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<V1alpha1PodScheduling> {
        const response = await this.createNamespacedPodSchedulingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a ResourceClaim
     */
    async createNamespacedResourceClaimRaw(requestParameters: ResourceV1alpha1ApiCreateNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaim>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createNamespacedResourceClaim.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1ResourceClaimToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimFromJSON(jsonValue));
    }

    /**
     * create a ResourceClaim
     */
    async createNamespacedResourceClaim(requestParameters: ResourceV1alpha1ApiCreateNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaim> {
        const response = await this.createNamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a ResourceClaimTemplate
     */
    async createNamespacedResourceClaimTemplateRaw(requestParameters: ResourceV1alpha1ApiCreateNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaimTemplate>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createNamespacedResourceClaimTemplate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1ResourceClaimTemplateToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimTemplateFromJSON(jsonValue));
    }

    /**
     * create a ResourceClaimTemplate
     */
    async createNamespacedResourceClaimTemplate(requestParameters: ResourceV1alpha1ApiCreateNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaimTemplate> {
        const response = await this.createNamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a ResourceClass
     */
    async createResourceClassRaw(requestParameters: ResourceV1alpha1ApiCreateResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClass>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createResourceClass.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/resourceclasses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1ResourceClassToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClassFromJSON(jsonValue));
    }

    /**
     * create a ResourceClass
     */
    async createResourceClass(requestParameters: ResourceV1alpha1ApiCreateResourceClassRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClass> {
        const response = await this.createResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of PodScheduling
     */
    async deleteCollectionNamespacedPodSchedulingRaw(requestParameters: ResourceV1alpha1ApiDeleteCollectionNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedPodScheduling.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of PodScheduling
     */
    async deleteCollectionNamespacedPodScheduling(requestParameters: ResourceV1alpha1ApiDeleteCollectionNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<V1Status> {
        const response = await this.deleteCollectionNamespacedPodSchedulingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ResourceClaim
     */
    async deleteCollectionNamespacedResourceClaimRaw(requestParameters: ResourceV1alpha1ApiDeleteCollectionNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ResourceClaim
     */
    async deleteCollectionNamespacedResourceClaim(requestParameters: ResourceV1alpha1ApiDeleteCollectionNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<V1Status> {
        const response = await this.deleteCollectionNamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ResourceClaimTemplate
     */
    async deleteCollectionNamespacedResourceClaimTemplateRaw(requestParameters: ResourceV1alpha1ApiDeleteCollectionNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ResourceClaimTemplate
     */
    async deleteCollectionNamespacedResourceClaimTemplate(requestParameters: ResourceV1alpha1ApiDeleteCollectionNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<V1Status> {
        const response = await this.deleteCollectionNamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ResourceClass
     */
    async deleteCollectionResourceClassRaw(requestParameters: ResourceV1alpha1ApiDeleteCollectionResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/resourceclasses`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ResourceClass
     */
    async deleteCollectionResourceClass(requestParameters: ResourceV1alpha1ApiDeleteCollectionResourceClassRequest, initOverrides?: RequestInit): Promise<V1Status> {
        const response = await this.deleteCollectionResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a PodScheduling
     */
    async deleteNamespacedPodSchedulingRaw(requestParameters: ResourceV1alpha1ApiDeleteNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1PodScheduling>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteNamespacedPodScheduling.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedPodScheduling.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PodSchedulingFromJSON(jsonValue));
    }

    /**
     * delete a PodScheduling
     */
    async deleteNamespacedPodScheduling(requestParameters: ResourceV1alpha1ApiDeleteNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<V1alpha1PodScheduling> {
        const response = await this.deleteNamespacedPodSchedulingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ResourceClaim
     */
    async deleteNamespacedResourceClaimRaw(requestParameters: ResourceV1alpha1ApiDeleteNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteNamespacedResourceClaim.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimFromJSON(jsonValue));
    }

    /**
     * delete a ResourceClaim
     */
    async deleteNamespacedResourceClaim(requestParameters: ResourceV1alpha1ApiDeleteNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaim> {
        const response = await this.deleteNamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ResourceClaimTemplate
     */
    async deleteNamespacedResourceClaimTemplateRaw(requestParameters: ResourceV1alpha1ApiDeleteNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaimTemplate>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteNamespacedResourceClaimTemplate.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimTemplateFromJSON(jsonValue));
    }

    /**
     * delete a ResourceClaimTemplate
     */
    async deleteNamespacedResourceClaimTemplate(requestParameters: ResourceV1alpha1ApiDeleteNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaimTemplate> {
        const response = await this.deleteNamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ResourceClass
     */
    async deleteResourceClassRaw(requestParameters: ResourceV1alpha1ApiDeleteResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClass>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteResourceClass.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/resourceclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClassFromJSON(jsonValue));
    }

    /**
     * delete a ResourceClass
     */
    async deleteResourceClass(requestParameters: ResourceV1alpha1ApiDeleteResourceClassRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClass> {
        const response = await this.deleteResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAPIResourcesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAPIResources(initOverrides?: RequestInit): Promise<V1APIResourceList> {
        const response = await this.getAPIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind PodScheduling
     */
    async listNamespacedPodSchedulingRaw(requestParameters: ResourceV1alpha1ApiListNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1PodSchedulingList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listNamespacedPodScheduling.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PodSchedulingListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PodScheduling
     */
    async listNamespacedPodScheduling(requestParameters: ResourceV1alpha1ApiListNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<V1alpha1PodSchedulingList> {
        const response = await this.listNamespacedPodSchedulingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ResourceClaim
     */
    async listNamespacedResourceClaimRaw(requestParameters: ResourceV1alpha1ApiListNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaimList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listNamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ResourceClaim
     */
    async listNamespacedResourceClaim(requestParameters: ResourceV1alpha1ApiListNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaimList> {
        const response = await this.listNamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ResourceClaimTemplate
     */
    async listNamespacedResourceClaimTemplateRaw(requestParameters: ResourceV1alpha1ApiListNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaimTemplateList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listNamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimTemplateListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ResourceClaimTemplate
     */
    async listNamespacedResourceClaimTemplate(requestParameters: ResourceV1alpha1ApiListNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaimTemplateList> {
        const response = await this.listNamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind PodScheduling
     */
    async listPodSchedulingForAllNamespacesRaw(requestParameters: ResourceV1alpha1ApiListPodSchedulingForAllNamespacesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1PodSchedulingList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/podschedulings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PodSchedulingListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PodScheduling
     */
    async listPodSchedulingForAllNamespaces(requestParameters: ResourceV1alpha1ApiListPodSchedulingForAllNamespacesRequest, initOverrides?: RequestInit): Promise<V1alpha1PodSchedulingList> {
        const response = await this.listPodSchedulingForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ResourceClaim
     */
    async listResourceClaimForAllNamespacesRaw(requestParameters: ResourceV1alpha1ApiListResourceClaimForAllNamespacesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaimList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/resourceclaims`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ResourceClaim
     */
    async listResourceClaimForAllNamespaces(requestParameters: ResourceV1alpha1ApiListResourceClaimForAllNamespacesRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaimList> {
        const response = await this.listResourceClaimForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ResourceClaimTemplate
     */
    async listResourceClaimTemplateForAllNamespacesRaw(requestParameters: ResourceV1alpha1ApiListResourceClaimTemplateForAllNamespacesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaimTemplateList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/resourceclaimtemplates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimTemplateListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ResourceClaimTemplate
     */
    async listResourceClaimTemplateForAllNamespaces(requestParameters: ResourceV1alpha1ApiListResourceClaimTemplateForAllNamespacesRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaimTemplateList> {
        const response = await this.listResourceClaimTemplateForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ResourceClass
     */
    async listResourceClassRaw(requestParameters: ResourceV1alpha1ApiListResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClassList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/resourceclasses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClassListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ResourceClass
     */
    async listResourceClass(requestParameters: ResourceV1alpha1ApiListResourceClassRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClassList> {
        const response = await this.listResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified PodScheduling
     */
    async patchNamespacedPodSchedulingRaw(requestParameters: ResourceV1alpha1ApiPatchNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1PodScheduling>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNamespacedPodScheduling.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPodScheduling.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNamespacedPodScheduling.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PodSchedulingFromJSON(jsonValue));
    }

    /**
     * partially update the specified PodScheduling
     */
    async patchNamespacedPodScheduling(requestParameters: ResourceV1alpha1ApiPatchNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<V1alpha1PodScheduling> {
        const response = await this.patchNamespacedPodSchedulingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified PodScheduling
     */
    async patchNamespacedPodSchedulingStatusRaw(requestParameters: ResourceV1alpha1ApiPatchNamespacedPodSchedulingStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1PodScheduling>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNamespacedPodSchedulingStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPodSchedulingStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNamespacedPodSchedulingStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PodSchedulingFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified PodScheduling
     */
    async patchNamespacedPodSchedulingStatus(requestParameters: ResourceV1alpha1ApiPatchNamespacedPodSchedulingStatusRequest, initOverrides?: RequestInit): Promise<V1alpha1PodScheduling> {
        const response = await this.patchNamespacedPodSchedulingStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ResourceClaim
     */
    async patchNamespacedResourceClaimRaw(requestParameters: ResourceV1alpha1ApiPatchNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNamespacedResourceClaim.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedResourceClaim.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimFromJSON(jsonValue));
    }

    /**
     * partially update the specified ResourceClaim
     */
    async patchNamespacedResourceClaim(requestParameters: ResourceV1alpha1ApiPatchNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaim> {
        const response = await this.patchNamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified ResourceClaim
     */
    async patchNamespacedResourceClaimStatusRaw(requestParameters: ResourceV1alpha1ApiPatchNamespacedResourceClaimStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNamespacedResourceClaimStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedResourceClaimStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNamespacedResourceClaimStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified ResourceClaim
     */
    async patchNamespacedResourceClaimStatus(requestParameters: ResourceV1alpha1ApiPatchNamespacedResourceClaimStatusRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaim> {
        const response = await this.patchNamespacedResourceClaimStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ResourceClaimTemplate
     */
    async patchNamespacedResourceClaimTemplateRaw(requestParameters: ResourceV1alpha1ApiPatchNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaimTemplate>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchNamespacedResourceClaimTemplate.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedResourceClaimTemplate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchNamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimTemplateFromJSON(jsonValue));
    }

    /**
     * partially update the specified ResourceClaimTemplate
     */
    async patchNamespacedResourceClaimTemplate(requestParameters: ResourceV1alpha1ApiPatchNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaimTemplate> {
        const response = await this.patchNamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ResourceClass
     */
    async patchResourceClassRaw(requestParameters: ResourceV1alpha1ApiPatchResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClass>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchResourceClass.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchResourceClass.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/resourceclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClassFromJSON(jsonValue));
    }

    /**
     * partially update the specified ResourceClass
     */
    async patchResourceClass(requestParameters: ResourceV1alpha1ApiPatchResourceClassRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClass> {
        const response = await this.patchResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified PodScheduling
     */
    async readNamespacedPodSchedulingRaw(requestParameters: ResourceV1alpha1ApiReadNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1PodScheduling>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNamespacedPodScheduling.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodScheduling.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PodSchedulingFromJSON(jsonValue));
    }

    /**
     * read the specified PodScheduling
     */
    async readNamespacedPodScheduling(requestParameters: ResourceV1alpha1ApiReadNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<V1alpha1PodScheduling> {
        const response = await this.readNamespacedPodSchedulingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified PodScheduling
     */
    async readNamespacedPodSchedulingStatusRaw(requestParameters: ResourceV1alpha1ApiReadNamespacedPodSchedulingStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1PodScheduling>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNamespacedPodSchedulingStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodSchedulingStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PodSchedulingFromJSON(jsonValue));
    }

    /**
     * read status of the specified PodScheduling
     */
    async readNamespacedPodSchedulingStatus(requestParameters: ResourceV1alpha1ApiReadNamespacedPodSchedulingStatusRequest, initOverrides?: RequestInit): Promise<V1alpha1PodScheduling> {
        const response = await this.readNamespacedPodSchedulingStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ResourceClaim
     */
    async readNamespacedResourceClaimRaw(requestParameters: ResourceV1alpha1ApiReadNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNamespacedResourceClaim.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readNamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimFromJSON(jsonValue));
    }

    /**
     * read the specified ResourceClaim
     */
    async readNamespacedResourceClaim(requestParameters: ResourceV1alpha1ApiReadNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaim> {
        const response = await this.readNamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified ResourceClaim
     */
    async readNamespacedResourceClaimStatusRaw(requestParameters: ResourceV1alpha1ApiReadNamespacedResourceClaimStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNamespacedResourceClaimStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readNamespacedResourceClaimStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimFromJSON(jsonValue));
    }

    /**
     * read status of the specified ResourceClaim
     */
    async readNamespacedResourceClaimStatus(requestParameters: ResourceV1alpha1ApiReadNamespacedResourceClaimStatusRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaim> {
        const response = await this.readNamespacedResourceClaimStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ResourceClaimTemplate
     */
    async readNamespacedResourceClaimTemplateRaw(requestParameters: ResourceV1alpha1ApiReadNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaimTemplate>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readNamespacedResourceClaimTemplate.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readNamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimTemplateFromJSON(jsonValue));
    }

    /**
     * read the specified ResourceClaimTemplate
     */
    async readNamespacedResourceClaimTemplate(requestParameters: ResourceV1alpha1ApiReadNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaimTemplate> {
        const response = await this.readNamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ResourceClass
     */
    async readResourceClassRaw(requestParameters: ResourceV1alpha1ApiReadResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClass>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readResourceClass.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/resourceclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClassFromJSON(jsonValue));
    }

    /**
     * read the specified ResourceClass
     */
    async readResourceClass(requestParameters: ResourceV1alpha1ApiReadResourceClassRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClass> {
        const response = await this.readResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified PodScheduling
     */
    async replaceNamespacedPodSchedulingRaw(requestParameters: ResourceV1alpha1ApiReplaceNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1PodScheduling>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPodScheduling.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPodScheduling.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPodScheduling.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1PodSchedulingToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PodSchedulingFromJSON(jsonValue));
    }

    /**
     * replace the specified PodScheduling
     */
    async replaceNamespacedPodScheduling(requestParameters: ResourceV1alpha1ApiReplaceNamespacedPodSchedulingRequest, initOverrides?: RequestInit): Promise<V1alpha1PodScheduling> {
        const response = await this.replaceNamespacedPodSchedulingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified PodScheduling
     */
    async replaceNamespacedPodSchedulingStatusRaw(requestParameters: ResourceV1alpha1ApiReplaceNamespacedPodSchedulingStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1PodScheduling>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPodSchedulingStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPodSchedulingStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPodSchedulingStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1PodSchedulingToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PodSchedulingFromJSON(jsonValue));
    }

    /**
     * replace status of the specified PodScheduling
     */
    async replaceNamespacedPodSchedulingStatus(requestParameters: ResourceV1alpha1ApiReplaceNamespacedPodSchedulingStatusRequest, initOverrides?: RequestInit): Promise<V1alpha1PodScheduling> {
        const response = await this.replaceNamespacedPodSchedulingStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ResourceClaim
     */
    async replaceNamespacedResourceClaimRaw(requestParameters: ResourceV1alpha1ApiReplaceNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNamespacedResourceClaim.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedResourceClaim.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1ResourceClaimToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimFromJSON(jsonValue));
    }

    /**
     * replace the specified ResourceClaim
     */
    async replaceNamespacedResourceClaim(requestParameters: ResourceV1alpha1ApiReplaceNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaim> {
        const response = await this.replaceNamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified ResourceClaim
     */
    async replaceNamespacedResourceClaimStatusRaw(requestParameters: ResourceV1alpha1ApiReplaceNamespacedResourceClaimStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNamespacedResourceClaimStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedResourceClaimStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNamespacedResourceClaimStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1ResourceClaimToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimFromJSON(jsonValue));
    }

    /**
     * replace status of the specified ResourceClaim
     */
    async replaceNamespacedResourceClaimStatus(requestParameters: ResourceV1alpha1ApiReplaceNamespacedResourceClaimStatusRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaim> {
        const response = await this.replaceNamespacedResourceClaimStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ResourceClaimTemplate
     */
    async replaceNamespacedResourceClaimTemplateRaw(requestParameters: ResourceV1alpha1ApiReplaceNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClaimTemplate>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceNamespacedResourceClaimTemplate.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedResourceClaimTemplate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceNamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1ResourceClaimTemplateToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClaimTemplateFromJSON(jsonValue));
    }

    /**
     * replace the specified ResourceClaimTemplate
     */
    async replaceNamespacedResourceClaimTemplate(requestParameters: ResourceV1alpha1ApiReplaceNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClaimTemplate> {
        const response = await this.replaceNamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ResourceClass
     */
    async replaceResourceClassRaw(requestParameters: ResourceV1alpha1ApiReplaceResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<V1alpha1ResourceClass>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceResourceClass.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceResourceClass.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha1/resourceclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1ResourceClassToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1ResourceClassFromJSON(jsonValue));
    }

    /**
     * replace the specified ResourceClass
     */
    async replaceResourceClass(requestParameters: ResourceV1alpha1ApiReplaceResourceClassRequest, initOverrides?: RequestInit): Promise<V1alpha1ResourceClass> {
        const response = await this.replaceResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
